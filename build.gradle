buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.johnrengelman:shadow:8.1.1"
    }
}

plugins {
    id 'java'
    id('com.github.johnrengelman.shadow') version '8.1.1'
}

repositories {
    gradlePluginPortal()
}

apply plugin: "com.github.johnrengelman.shadow"

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    implementation("com.google.guava:guava:32.1.1-jre")
    implementation('com.fasterxml.jackson.core:jackson-databind:2.8.6')
    implementation('com.fasterxml.jackson.core:jackson-core:2.8.6')
    implementation('com.fasterxml.jackson.core:jackson-annotations:2.8.6')
    implementation('com.google.code.gson:gson:2.8.7')
}

test{
    environment 'JAVA_TOOL_OPTIONS', '--add-opens=java.base/java.time=ALL-UNNAMED'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

/*tasks.register('fatJar', Jar) {
    manifest.from jar.manifest
    classifier = 'all'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
    with jar
}*/

jar {
    manifest {
        attributes('Main-class': 'Main')
    }
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

shadow {
    shadowJar {
        archiveBaseName.set('Lab5')
        archiveClassifier.set('')
    }
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}